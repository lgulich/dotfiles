"  ------------------
"  - Plugin Manager -
"  ------------------
set nocompatible
filetype off
set rtp+=~/dotfiles/vim/vim_plug

"  -----------
"  = Plugins =
"  -----------
call plug#begin('~/.vim/plugged')
" General
" Plug 'ycm-core/YouCompleteMe', {'do': './install.py --clangd-completer'}
Plug 'chiel92/vim-autoformat'
Plug 'joshdick/onedark.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'

" C-style languages
Plug 'bfrg/vim-cpp-modern'
Plug 'drmikehenry/vim-headerguard', { 'for': ['cpp', 'c'] }
Plug 'ericcurtin/CurtineIncSw.vim'
Plug 'kgreenek/vim-ros-ycm' " Creates ycm_extra_conf for catkin

call plug#end()

"  -----------
"  - General -
"  -----------
set autoread " Detect when a file has changed

" Indentation and text width
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab
set autoindent
set textwidth=80

" Line numbering
set ruler
set number
set relativenumber
set showcmd

" Minimal lines above and below caret
set scrolloff=5

" Change carret shape to I-beam in insert mode.
if has("autocmd")
  au VimEnter,InsertLeave * silent execute '!echo -ne "\e[2 q"' | redraw!
  au InsertEnter,InsertChange *
        \ if v:insertmode == 'i' |
        \   silent execute '!echo -ne "\e[6 q"' | redraw! |
        \ elseif v:insertmode == 'r' |
        \   silent execute '!echo -ne "\e[4 q"' | redraw! |
        \ endif
  au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
endif
"  --------------
"  - Remap keys -
"  --------------
:imap jj <ESC>
:map <F3> :Autoformat<CR>
:map <C-t> :Files<CR>
:map <F5> :call CurtineIncSw()<CR>

"  ----------------
"  - New Commands -
"  ----------------
:command MakeTags !ctags -R .<CR>

" --------------
" - Colorscheme-
" --------------
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

syntax on
try
  colorscheme onedark
catch /^Vim\%((\a\+)\)\=:E185/
  colorscheme default
  set background=dark
endtry

" --------------
" -  NERDTree  -
" --------------
map <C-n> :NERDTreeToggle<CR>

" Show file previews in NERDTree
let g:nerd_preview_enabled = 0
let g:preview_last_buffer  = 0

function! NERDTreePreview()
  " Only on nerdtree window
  if (&ft ==# 'nerdtree')
    " Get filename
    let l:filename = substitute(getline("."), "^\\s\\+\\|\\s\\+$","","g")

    " Preview if it is not a folder
    let l:lastchar = strpart(l:filename, strlen(l:filename) - 1, 1)
    if (l:lastchar != "/" && strpart(l:filename, 0 ,2) != "..")

      let l:store_buffer_to_close = 1
      if (bufnr(l:filename) > 0)
        " Don't close if the buffer is already open
        let l:store_buffer_to_close = 0
      endif

      " Do preview
      execute "normal go"

      " Close previews buffer
      if (g:preview_last_buffer > 0)
        execute "bwipeout " . g:preview_last_buffer
        let g:preview_last_buffer = 0
      endif

      " Set last buffer to close it later
      if (l:store_buffer_to_close)
        let g:preview_last_buffer = bufnr(l:filename)
      endif
    endif
  elseif (g:preview_last_buffer > 0)
    " Close last previewed buffer
    let g:preview_last_buffer = 0
  endif
endfunction

function! NERDTreePreviewToggle()
  if (g:nerd_preview_enabled)
    let g:nerd_preview_enabled = 0
    augroup nerdpreview
      autocmd!
    augroup END
  else
    let g:nerd_preview_enabled = 1
    augroup nerdpreview
      autocmd!
      autocmd CursorMoved * nested call NERDTreePreview()
    augroup END
  endif
endfunction

call NERDTreePreviewToggle()

"  ---------------
"  - Headerguard -
"  ---------------
function! g:HeaderguardName()
  let project_name = expand('%:p:gs@.*include/\(.*\)/.*@\1@g')
  let project_name = substitute(project_name, '[^0-9a-zA-Z_]', '_', 'g')
  let project_name = toupper(project_name)
  let file_name = toupper(expand('%:t:gs/[^0-9a-zA-Z_]/_/g'))
  return project_name . "_" . file_name . "_"
endfunction

function! g:HeaderguardLine3()
  return "#endif  // " . g:HeaderguardName() . ""
endfunction

"  --------------
"  - ROS config -
"  --------------
autocmd BufRead,BufNewFile *.launch setfiletype xml
